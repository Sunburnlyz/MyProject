pragma circom 2.0.0;



//参数为(n,t,d)=(256,3,5),RF=8, RP=56

template SBox() {
    signal input in;
    signal output out;

    signal sq;
    signal quad;

    sq <== in * in;       
    quad <== sq * sq;     
    out <== quad * in;      
}

template MDS(M) {
    signal input in[3];
    signal output out[3];
    signal sum[3];
    for(var i = 0;i<3;i++){
        sum[i] <== in[0] * M[i][0] + in[1] * M[i][1] + in[2] * M[i][2];
        out[i] <== sum[i];
    }
}

template Poseidon2Round(M,C,full) {
    signal input in[3];        
    signal output out[3];
    
    //加轮常数
    signal tmp[3];
    for(var i = 0;i<3;i++){
        tmp[i] <== in[i] + C[i];
    }

    //过S盒，有全轮盒部分轮的区别
    signal afterS[3];
    if (full == 1){
        component s[3];
        for (var i = 0; i < 3; i++) {
            s[i] = SBox();
            s[i].in <== tmp[i];
            afterS[i] <== s[i].out;
        }
    } else {
        component s0 = SBox();
        s0.in <== tmp[0];
        afterS[0] <== s0.out;
        for (var i = 1; i < 3; i++) {
            afterS[i] <== tmp[i];
        }
    }
     
    //MDS线性混合
    component m  = MDS(M);
    for (var i = 0; i < 3; i++) {
        m.in[i] <== afterS[i];
    }
    for (var i = 0; i < 3; i++) {
        out[i] <== m.out[i];
    }
}


template Poseidon2() {
    signal input in[3];
    signal output out[3];
    var C1[192] = [
    132100702508589007,
    142336990993942288391715120,
    152310391606528516350089305069773378,
    132100701409836812,
    142336987535244870214649330,
    152310390358663567487713392455625849,
    132100700344606541,
    142336988688237869048500659,
    152310389111136598154543974081530448,
    132100690586713218,
    142336985228414655385984635,
    152310388017097322540846082907943943,
    132100689521482947,
    142336986381407619591653946,
    152310386769420436221624766253863470,
    132100688422730752,
    142336982922710133232006904,
    152310385522008037296957404687490069,
    132100687357500481,
    142336984075703132065850041,
    152310384274633348139698961290361404,
    132100694915792262,
    142336980617005749053820797,
    152310383027523215569732935183983651,
    132100693850561991,
    142336981769998713259498300,
    152310381779846180529266704543465994,
    132100692751809796,
    142336978311301295082448894,
    152310380531829397686240820111936561,
    132100691686579525,
    142336979464294293916300223,
    152310379284454559798730263474678296,
    132100750656811706,
    142336939113198855712747615,
    152310418120180297948856937433519615,
    132100749591319291,
    142336940266191819918287902,
    152310416872635489453356676150326230,
    132100748492304952,
    142336936807494333558757596,
    152310415624824125499676180913700333,
    132100747426812537,
    142336937960487332392471709,
    152310414376977050680433676219554756,
    132100754985890750,
    142336934501789810867921241,
    152310413128787857333125129411691995,
    132100753920398335,
    142336935654782775073469720,
    152310411881243197567876345580299250,
    132100752821383996,
    142336932196085356896537050,
    152310410634036225637908438358257097,
    132100751755891581,
    142336933349078355730259355,
    152310409386189299539910211860122592,
    132100741998784690,
    142336929889254865042510419,
    152310408294556067323068252579329463,
    132100740933292275,
    142336931042247829248050706,
    152310407047161363453001945346233246,
    132100739834277936,
    142336927583550342888536784,
    152310405799199602061097128587959717,
    132100738768785521,
    142336928736543341722250897,
    152310404551502627233084453737085836,
    132100746327863734,
    142336925277845958710379349,
    152310403304372710539121416275666323,
    132100745262371319,
    142336926430838922915927828,
    152310402056977857929796366167737274,
    132100744163356980,
    142336922972141504739011542,
    152310400809620785977071162224332161,
    132100743097864565,
    142336924125134503572733847,
    152310399561923662436821342261799848,
    132100733340497578,
    142336957561086555732866119,
    152310437771410434756116384966808943,
    132100732275267307,
    142336958714079519938535430,
    152310436523582267984375842388226886,
    132100731175990824,
    142336955255382033578876100,
    152310435275754066927154787664985469,
    132100730110760553,
    142336956408375032412719237,
    152310434028228165921273226660207444,
    132100737669576622,
    142336952949677510888006977,
    152310432780017408505794443723949387,
    132100736604346351,
    142336954102670475093684480,
    152310431532189390473312643887031138,
    132100735505069868,
    142336950643973056916622786,
    152310430284965572180402993801604441,
    132100734439839597,
    142336951796966055750474115,
    152310429037439819886758577773218672,
    132100724682470562,
    142336948337142842088019531,
    152310427943368078080018279216002343,
    132100723617240291,
    142336949490135806293688842,
    152310426695689974424033959573394190,
    132100722517963808,
    142336946031438319934045896,
    152310425447712003081857192922668341,
    132100721452733537,
    142336947184431318767889033,
    152310424200336169789906898037078812,
    132100729011549606,
    142336943725733935755855693,
    152310422953184135553394918638609667,
    132100727946319335,
    142336944878726899961533196,
    152310421705505883167159121411031850,
    132100726847042852,
    142336941420029481784487886,
    152310420458132592076818378236333329,
    132100725781812581,
    142336942573022480618339215,
    152310419210756610063623805019466552,
    132100785826310874,
    142336902213062242801199119,
    152310298336458619462300547945354911,
    132100784744041115,
    142336903365912253315398734,
    152310297108256753203629209080721590,
    132100783662328408,
    142336899907357720647205004,
    152310295841671459329255111124991629,
    132100782580058649,
    142336901060207765789578445,
    152310294613167400542262103053179044,
    132100790154341342,
    142336897601653197956380937,
    152310293346959409168502753745471163,
    132100789072071583,
    142336898754503208470572360,
    152310292118757396501185545742229650,
    132100787990358876,
    142336895295948743984992650,
    152310290851567855873460239645732521,
    132100786908089117,
    142336896448798789127357899,
    152310289623063650650799764670040192,
    132100777168283858,
    142336892989118252130896387,
    152310288512052925463770769615353559,
    132100776086014099,
    142336894141968262645096002,
    152310287284000831789123062843298046,
    132100775004301392,
    142336890683413729976918656,
    152310286017265472481905097785974469,
    132100773922031633,
    142336891836263775119292097,
    152310284788911181644731537470372076,
    132100781496314326,
    142336888377709345798773509,
    152310283521344652106537685312153331,
    132100780414044567,
    142336889530559356312964932,
    152310282293292704849543113909141722,
    132100779332331860,
    142336886072004891827401606,
    152310281025952805980689334710783713,
    132100778250062101,
    142336887224854936969766855,
    152310279797598661570176109017917640,
    132100768509996746,
    142336920660949397360602135,
    152310317992526216649908680197608975,
    132100767427989131,
    142336921813799407874668630,
    152310316764041029017492507642638374,
    132100766346014280,
    142336918355244875206608020,
    152310315497434203307216028921069085,
    132100765264006665,
    142336919508094920348848341,
    152310314269251207644112355239352372,
    132100772838027214,
    142336916049540352515751185,
    152310313003027591990701019751499307
];

    var M1[9] = [1,2,3,3,1,2,2,3,1];

    var M[3][3];
    for (var i = 0; i < 3; i++){
        for (var j = 0; j < 3; j++){
            M[i][j] = M1[i*3 + j];
        }
    }

    var C[64][3];
    for (var i = 0; i < 64; i++){
        for (var j = 0; j < 3; j++){
            C[i][j] = C1[i*3 + j];
        }
    }

    signal x[3];
    signal x_out[64][3];
    for (var i = 0; i < 3; i++) {
        x[i] <== in[i];
    }

    

    component results0[4];
    var CC[3] = C[0];
    results0[0] = Poseidon2Round(M,CC,1);
    for (var j = 0; j < 3; j++){
        results0[0].in[j] <== x[j];
    }
    for(var i = 0; i < 3; i++){
        x_out[0][i] <== results0[0].out[i];
    }


    for(var i = 1; i < 4;i++){
        var CC[3] = C[i];
        results0[i] = Poseidon2Round(M,CC,1);
        for (var j = 0; j < 3; j++){
            results0[i].in[j] <== x_out[i - 1][j];
        }
        for (var j = 0; j < 3; j++){
            x_out[i][j] <== results0[i].out[j];
        } 
    }
    component results1[56];
    for(var i = 0;i < 56; i++ ){
        var CC[3] = C[4 + i];
        results1[i] = Poseidon2Round(M,CC,0);
        for (var j = 0; j < 3; j++){
            results1[i].in[j] <== x_out[4 + i - 1][j];
        }
        for (var j = 0; j < 3; j++){
            x_out[4 + i][j] <== results1[i].out[j];
        } 
    }
    component results2[4];
    for(var i = 0;i < 4; i++){
        var CC[3] = C[60+i];
        results2[i] = Poseidon2Round(M,CC,1);
        for (var j = 0; j < 3; j++){
            results2[i].in[j] <== x_out[60+i-1][j];
        }
        for (var j = 0; j < 3; j++){
            x_out[60+i][j] <== results2[i].out[j];
        } 
    }

    for (var i = 0; i < 3; i++){
        out[i] <== x_out[63][i];
    }
    log("Output 0: ", out[0]);
    log("Output 1: ", out[1]);
    log("Output 2: ", out[2]);
}


template Poseidon2Verify(){
    signal input hash;
    signal input plain[3];

    signal x[3];
    for(var i=0;i<3;i++){
        x[i] <== plain[i];
    }

    component p = Poseidon2();
    for(var i = 0; i < 3;i++){
        p.in[i] <== x[i]; 
    }
    hash === p.out[0];
}

 //component main = Poseidon2();
//component main = Poseidon2Verify();
component main = Poseidon2Verify();
